/*
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
 * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
 * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
description = 'Ethereum ÐΞVp2p implementation.'

sourceSets {
  integrationTest {
    java.srcDir 'src/integrationTest/java'
    kotlin.srcDir 'src/integrationTest/kotlin'
    resources.srcDir 'src/integrationTest/resources'
    compileClasspath += main.output
    runtimeClasspath += main.output
  }
}

dependencies {
  compile project(':bytes')
  compile project(':concurrent')
  compile project(':concurrent-coroutines')
  compile project(':crypto')
  compile project(':kademlia')
  compile project(':net-coroutines')
  compile project(':rlp')
  compile 'io.vertx:vertx-core'
  compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core'
  compile 'org.slf4j:slf4j-api'

  compileOnly 'org.bouncycastle:bcprov-jdk15on'

  testCompile project(':junit')
  testCompile 'org.bouncycastle:bcprov-jdk15on'
  testCompile 'org.junit.jupiter:junit-jupiter-api'
  testCompile 'org.junit.jupiter:junit-jupiter-params'

  testRuntime 'org.junit.jupiter:junit-jupiter-engine'

  integrationTestCompile project(':junit')
  integrationTestCompile 'org.bouncycastle:bcprov-jdk15on'
  integrationTestCompile 'org.junit.jupiter:junit-jupiter-api'
  integrationTestCompile 'org.junit.jupiter:junit-jupiter-params'

  integrationTestRuntime 'org.junit.jupiter:junit-jupiter-engine'
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}